{
  // 使用 IntelliSense 了解相关属性。 
  // 悬停以查看现有属性的描述。
  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [  
    // 调试 js 单文件，适合直接调试某个 js 入口文件，也可以使用“插件”，右键debug
    {
      "type": "node",
      "request": "launch",
      "name": "调试 单个 js 文件",
      "program": "${workspaceFolder}/packages/signalFile/index.js"
    },
    {
      "type": "node",
      "request": "launch",
      "name": "调试 多个 js 文件",
      "program": "${workspaceFolder}/js/index.js"
    },
    // 调试 node 项目
    {
      "name": "node-server的调试方式 a.js",
      "program": "${workspaceFolder}/packages/node-server/a.js",
      "request": "launch",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "type": "node"
    },
    {
      "command": "npm run b",
      "name": "调用 package.json 的 script 调试 b.js",
      "request": "launch",
      "type": "node-terminal",
      "cwd": "${workspaceFolder}/packages/node-server",
    },
    // 调试 ts 项目
    {
      "name": "ts-debug",
      "request": "launch",
      "type": "node",
      "program": "${workspaceFolder}/packages/ts-debug/index.ts",
      "preLaunchTask": "tsc: build - tsconfig.json",
      "outFiles": [
        "${workspaceFolder}/packages/ts-debug/**/*.js"
      ]
    },
    {
      "command": "npm run dev:main",
      "name": " 可以直接调试 ts 源文件 strong Launch via NPM ",
      "request": "launch",
      "cwd": "${workspaceRoot}/packages/electron-webpack-ts-debug",
      "type": "node-terminal",
    },
    {
      "name": "Launch via NPM",
      "request": "launch",
      "runtimeArgs": [
        "run",
        "dev:main"
      ],
      "runtimeExecutable": "npm",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "cwd": "${workspaceRoot}/packages/electron-webpack-ts-debug",
      "type": "node"
    },
    {
      "name": "open chrome listen 8081",
      "request": "launch",
      "type": "chrome",
      "url": "http://localhost:8081",
    },
    {
      "name": "open webpack-dev-server",
      "request": "",
      "type": "node",
      // "program": "${workspaceFolder}/packages//main.js",
    },
    // 使用 node 的 launch 触发 task
    {
      "name": "touch webpack-dev-server task",
      "request": "launch",
      "type": "node",
      // "program": "${workspaceFolder}/packages//main.js",
    },
    // electron main 主进程调试1， 通过
    {
      "name": "Electron Main 1，通过 node_modules 的 electron",
      "program": "${workspaceFolder}/packages/electron-main-debug/main.js",
      "request": "launch",
      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "type": "node"
    },
    // electron main 主进程调试2
    {
      "name": "Electron Main2 通过 npm 执行",
      "command": "npm run dev",
      "request": "launch",
      "cwd": "${workspaceRoot}/packages/electron-main-debug",
      "type": "node-terminal"
    },
    // 通过 remote-debuggin-port 在vscode 中调试 渲染进程
    {
      "name": "electron-main-debug 项目的 Electron Renderer",
      "request": "attach",
      "type": "chrome",
      "port": 9222,
      "webRoot": "${workspaceFolder}"
    },
    
    // 调试指定端口和域名，
    // 不是很好用需要先 打 debugger 找到指定的可调试代码
    // 这个功能 WebStorm 好用，
    {
      "name": "webpack-debug ",
      "request": "launch",
      "type": "chrome",
      "url": "http://localhost:8081",
      "webRoot": "${workspaceFolder}",
    },
    // 调试 ts 单文件
    {
      "name": "使用ts-node 调用ts",
      "type": "node",
      "request": "launch",
      "runtimeArgs": [
        "-r",
        "ts-node/register"
      ],
      "skipFiles": [
        "<node_internals>/**",
        "node_modules/**/**/*"
      ],
      "program": "${workspaceFolder}/packages/ts-debug/index.ts"
    },
    // 复合模式的 第个人调试方式
    {
      "name": "node-server的调试方式 b.js",
      "program": "${workspaceFolder}/packages/node-server/b.js",
      "request": "launch",
      "skipFiles": [
        "<node_internals>/**"
      ],
      "type": "node"
    },
  ],
  // 复合模式，适合需要启多个调试环境
  "compounds": [
    {
      "name": "复合模式，适合需要启多个调试环境",
      "configurations": [
        "node-server的调试方式 a.js",
        "node-server的调试方式 b.js",
      ],
      // "preLaunchTask": "${defaultBuildTask}",
      // "stopAll": true
    }
  ]
}